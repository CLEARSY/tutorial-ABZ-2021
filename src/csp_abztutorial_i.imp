/*
This work is licensed under the Creative Commons Attribution 4.0 International License. 
To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/
*/

IMPLEMENTATION 
    csp_abztutorial_i
    
REFINES 
    csp_abztutorial_r
    
SEES
    csp_abztutorial_nrv,
    csp_abztutorial_cst,
    csp_abztutorial_register,
    csp_abztutorial_debug,
    csp_stdLib_type,
    csp_stdLib_type_cst,
    csp_stdLib_arith,
    csp_stdLib_arithHelper,
    csp_stdLib_bitwise,
    csp_stdLib_addr,
    csp_cs0Lib
    
    
CONCRETE_VARIABLES
    rv_lc_watchdogTimeoutH,
    rv_lc_watchdogTimeoutL,
    rv_lc_carCount,
    rv_lc_zoneFree,
    rv_lc_inPrev,
    rv_lc_outPrev
    
INVARIANT
    rv_lc_watchdogTimeoutH : uint32_t &
    rv_lc_watchdogTimeoutL : uint32_t &
    rv_lc_carCount : uint8_t &
    rv_lc_zoneFree : uint8_t &
    rv_lc_inPrev : uint8_t &
    rv_lc_outPrev : uint8_t &
    rv_lc_carCount : 120..136 &
    
    rv_lc_watchdogTimeoutH*0x100000000+rv_lc_watchdogTimeoutL = v_lc_watchdogTimeout &
    v_lc_carCount(max(dom(v_lc_carCount))) = rv_lc_carCount - 128  &
    rv_lc_zoneFree = Convert_Bool(v_lc_zoneFree) &
    v_lc_zoneFree = bool(rv_lc_carCount = 128) &
    rv_lc_inPrev = v_lc_inPrev &
    rv_lc_outPrev = v_lc_outPrev
    
INITIALISATION
    rv_lc_watchdogTimeoutH := 0 ;
    rv_lc_watchdogTimeoutL := C_lc_watchdogTimeoutPermissive ;
    rv_lc_carCount := 128 ;
    rv_lc_zoneFree := STRUE ;
    rv_lc_inPrev := 0 ;
    rv_lc_outPrev := 0
    
    
OPERATIONS
    
    r_f__lc_treatement(p_clockH, p_clockL, p_inLc, p_outLc) =
    VAR
        lb
    IN
        lb :(lb : BOOL);
        
        lb <-- vitalClock_checkAccuracy(p_clockH, p_clockL, C_lc_clockAccurancy);
        IF lb = TRUE
        THEN
            IF p_inLc = 0
            THEN
                IF p_outLc = 0
                THEN
                    rv_lc_watchdogTimeoutH, rv_lc_watchdogTimeoutL 
                    <-- get_add_uint64(p_clockH, p_clockL, 0, C_lc_watchdogTimeoutPermissive) ;
                    rv_lc_inPrev := p_inLc ;
                    rv_lc_outPrev := p_outLc
                ELSIF p_outLc = 1
                THEN
                    IF rv_lc_outPrev = 0
                    THEN
                        IF 121 <= rv_lc_carCount
                        THEN
                            rv_lc_watchdogTimeoutH, rv_lc_watchdogTimeoutL 
                            <-- get_add_uint64(p_clockH, p_clockL, 0, C_lc_watchdogTimeoutPermissive) ;
                            rv_lc_carCount := fit_in_uint8(sub_uint32(rv_lc_carCount |-> 1));
                            IF rv_lc_carCount = 128
                            THEN
                                rv_lc_zoneFree := STRUE
                            ELSE
                                rv_lc_zoneFree := SFALSE
                            END;
                            rv_lc_inPrev := p_inLc ;
                            rv_lc_outPrev := p_outLc
                        ELSE
                            watchdogLiveness_testDeadline(0x10100002, 0, 0)
                        END
                    ELSE
                        rv_lc_watchdogTimeoutH, rv_lc_watchdogTimeoutL 
                        <-- get_add_uint64(p_clockH, p_clockL, 0, C_lc_watchdogTimeoutPermissive) ;
                        rv_lc_inPrev := p_inLc ;
                        rv_lc_outPrev := p_outLc
                    END
                END
            ELSIF p_inLc = 1
            THEN
                IF rv_lc_inPrev = 0
                THEN
                    IF p_outLc = 0
                    THEN
                        IF rv_lc_carCount <= 135
                        THEN
                            rv_lc_watchdogTimeoutH, rv_lc_watchdogTimeoutL 
                            <-- get_add_uint64(p_clockH, p_clockL, 0, C_lc_watchdogTimeoutPermissive) ;
                            rv_lc_carCount := fit_in_uint8(add_uint32(rv_lc_carCount |-> 1));
                            IF rv_lc_carCount = 128
                            THEN
                                rv_lc_zoneFree := STRUE
                            ELSE
                                rv_lc_zoneFree := SFALSE
                            END;
                            rv_lc_inPrev := p_inLc ;
                            rv_lc_outPrev := p_outLc
                        ELSE
                            watchdogLiveness_testDeadline(0x10100003, 0, 0)
                        END
                    ELSIF p_outLc = 1
                    THEN
                        IF rv_lc_outPrev = 0
                        THEN
                            rv_lc_watchdogTimeoutH, rv_lc_watchdogTimeoutL 
                            <-- get_add_uint64(p_clockH, p_clockL, 0, C_lc_watchdogTimeoutPermissive) ;
                            rv_lc_inPrev := p_inLc ;
                            rv_lc_outPrev := p_outLc
                        ELSIF rv_lc_carCount <= 135
                        THEN
                            rv_lc_watchdogTimeoutH, rv_lc_watchdogTimeoutL 
                            <-- get_add_uint64(p_clockH, p_clockL, 0, C_lc_watchdogTimeoutPermissive) ;
                            rv_lc_carCount := fit_in_uint8(add_uint32(rv_lc_carCount |-> 1));
                            IF rv_lc_carCount = 128
                            THEN
                                rv_lc_zoneFree := STRUE
                            ELSE
                                rv_lc_zoneFree := SFALSE
                            END;
                            rv_lc_inPrev := p_inLc ;
                            rv_lc_outPrev := p_outLc
                        ELSE
                            watchdogLiveness_testDeadline(0x10100004, 0, 0)
                        END
                    END
                END
            END
        END
    END;
    
    
    lc_watchdogTimer =
    BEGIN
        watchdogLiveness_testDeadline(0x10100001, rv_lc_watchdogTimeoutH, rv_lc_watchdogTimeoutL)
    END;
    
    po <-- r_f__lc_get_freeZone =
    BEGIN
        po := rv_lc_zoneFree
    END;
    
    p_address, p_value <-- r_f__lc_getSetAddressAndValue =
    VAR
        lsb
    IN
        lsb :(lsb : uint8_t);
        
        p_address <-- get_addrUint32(LATESET);
        p_value   := 0;
        
        lsb <-- r_f__get_CS0_outputInhibition;
        IF lsb = SFALSE
        THEN
            IF rv_lc_zoneFree = STRUE
            THEN
                p_value := C_lc_outputMask
            END
        END
    END;
    
    p_address, p_value <-- r_f__lc_getClearAddressAndValue =
    BEGIN
        p_address <-- get_addrUint32(LATECLR);
        p_value := C_lc_outputMask
    END
    
    
END